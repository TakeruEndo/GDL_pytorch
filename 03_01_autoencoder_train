{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"03_01_autoencoder_train","provenance":[],"collapsed_sections":[],"mount_file_id":"1-io6S7RJUG5fZzuJt7EJFpdRi204HBVv","authorship_tag":"ABX9TyM/4zfYYVgIj+Q65gTM9gdb"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VqcuQl6bOlH7","executionInfo":{"status":"ok","timestamp":1608558427146,"user_tz":-540,"elapsed":1440,"user":{"displayName":"遠藤丈","photoUrl":"","userId":"13996855833058403790"}},"outputId":"df3833d5-99e1-4d32-f8e8-fd6d3381c4d8"},"source":["cd drive/MyDrive/GDP_pytorch/"],"execution_count":1,"outputs":[{"output_type":"stream","text":["/content/drive/MyDrive/GDP_pytorch\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RCQnaxRlqXpm","executionInfo":{"status":"ok","timestamp":1608558431048,"user_tz":-540,"elapsed":5337,"user":{"displayName":"遠藤丈","photoUrl":"","userId":"13996855833058403790"}}},"source":["import os\n","\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","import torch\n","import torch.nn as nn\n","import torchvision\n","import torch.optim as optim\n","import torch.nn.functional as F\n","import torchvision.transforms as transforms\n","\n","%matplotlib inline"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"U0n0wcEsYd0j","executionInfo":{"status":"ok","timestamp":1608561063047,"user_tz":-540,"elapsed":1164,"user":{"displayName":"遠藤丈","photoUrl":"","userId":"13996855833058403790"}}},"source":["transform = transforms.Compose(\n","    [transforms.ToTensor()])\n","\n","trainset = torchvision.datasets.MNIST(root='./data', train=True,\n","                                        download=True, transform=transform)\n","trainloader = torch.utils.data.DataLoader(trainset, batch_size=64,\n","                                          shuffle=True, num_workers=2)\n","\n","testset = torchvision.datasets.MNIST(root='./data', train=False,\n","                                       download=True, transform=transform)\n","testloader = torch.utils.data.DataLoader(testset, batch_size=64,\n","                                         shuffle=False, num_workers=2)"],"execution_count":43,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IrinGeuacgco","executionInfo":{"status":"ok","timestamp":1608561064218,"user_tz":-540,"elapsed":816,"user":{"displayName":"遠藤丈","photoUrl":"","userId":"13996855833058403790"}},"outputId":"b4bf6003-6e0d-4a2d-9ec0-7dd3f6656da6"},"source":["# dataloader の確認\n","image,label = iter(trainloader).__next__()\n","print(image.shape, label)\n","print(image.view(32, -1).shape)"],"execution_count":44,"outputs":[{"output_type":"stream","text":["torch.Size([64, 1, 28, 28]) tensor([5, 8, 1, 5, 8, 2, 1, 1, 2, 5, 8, 1, 4, 2, 5, 7, 8, 7, 2, 6, 1, 1, 3, 8,\n","        3, 3, 0, 7, 6, 1, 2, 1, 0, 3, 2, 3, 0, 1, 6, 9, 2, 9, 2, 7, 1, 9, 7, 5,\n","        3, 2, 2, 1, 9, 0, 6, 4, 2, 3, 2, 7, 2, 4, 5, 1])\n","torch.Size([32, 1568])\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"pdSmSBc7iRp7"},"source":["## AutoENcoderのパラメタ調整\n","わかりやすいサイト  \n","https://blog.shikoan.com/pytorch-convtranspose2d/"]},{"cell_type":"code","metadata":{"id":"VmE4J9RNOryo","executionInfo":{"status":"ok","timestamp":1608564170917,"user_tz":-540,"elapsed":1288,"user":{"displayName":"遠藤丈","photoUrl":"","userId":"13996855833058403790"}}},"source":["class Autoencoder(nn.Module):\n","    def __init__(self):\n","        super(Autoencoder, self).__init__()\n","        # Encoder\n","        self.conv1 = nn.Conv2d(in_channels = 1, out_channels = 32, kernel_size = 3, stride=1, padding=1)\n","        self.conv2 = nn.Conv2d(in_channels = 32, out_channels = 64, kernel_size = 3, stride=2, padding=1)\n","        self.conv3 = nn.Conv2d(in_channels = 64, out_channels = 64, kernel_size = 3, stride=2, padding=1)\n","        self.conv4 = nn.Conv2d(in_channels = 64, out_channels = 64, kernel_size = 3, stride=1, padding=1)\n","        #Decoder Layers\n","        self.t_conv1 = nn.ConvTranspose2d(in_channels=64, out_channels=64, kernel_size=3, stride=1, padding=1)\n","        self.t_conv2 = nn.ConvTranspose2d(in_channels=64, out_channels=64, kernel_size=3, stride=1, padding=1)\n","        self.t_conv3 = nn.ConvTranspose2d(in_channels=64, out_channels=32, kernel_size=2, stride=2)\n","        self.t_conv4 = nn.ConvTranspose2d(in_channels=32, out_channels=1, kernel_size=2, stride=2)\n","        self.leaky_relu = F.leaky_relu\n","        self.pool = nn.MaxPool2d(2, 2)\n","        self.sigmoid = nn.Sigmoid()\n","\n","    def forward(self, x):\n","        batch_size = x.shape[0]\n","        # encode\n","        x = self.leaky_relu(self.conv1(x))\n","        x = self.leaky_relu(self.conv2(x))\n","        x = self.leaky_relu(self.conv3(x))\n","        # 以下を抜かすとめっちゃloss下がる\n","        # x = self.leaky_relu(self.conv4(x))   \n","        # decode\n","        # x = self.leaky_relu(self.t_conv1(x))\n","        # x = self.leaky_relu(self.t_conv2(x))\n","        x = self.leaky_relu(self.t_conv3(x))\n","        x = self.leaky_relu(self.t_conv4(x))\n","        x = self.sigmoid(x)\n","\n","        return x\n","\n","# 参照\n","# https://qiita.com/shushin/items/3f35a9a4200d7be74dc9\n","class ConvAutoencoder(nn.Module):\n","    def __init__(self):\n","        super(ConvAutoencoder, self).__init__()\n","        #Encoder Layers\n","        self.conv1 = nn.Conv2d(in_channels = 1, out_channels = 16, kernel_size = 3, padding = 1)\n","        self.conv2 = nn.Conv2d(in_channels = 16, out_channels = 4, kernel_size = 3, padding = 1)\n","        #Decoder Layers\n","        self.t_conv1 = nn.ConvTranspose2d(in_channels = 4, out_channels = 16, kernel_size = 2, stride = 2)\n","        self.t_conv2 = nn.ConvTranspose2d(in_channels = 16, out_channels = 1, kernel_size = 2, stride = 2)\n","        self.relu = nn.ReLU()\n","        self.pool = nn.MaxPool2d(2, 2)\n","        self.sigmoid = nn.Sigmoid()\n","\n","    def forward(self, x):\n","        #コメントに28×28のモノクロ画像をi枚を入力した時の次元を示す\n","        #encode#                          #in  [i, 1, 28, 28] \n","        x = self.relu(self.conv1(x))      #out [i, 16, 28, 28]  \n","        x = self.pool(x)                  #out [i, 16, 14, 14]\n","        x = self.relu(self.conv2(x))      #out [i, 4, 14, 14]\n","        x = self.pool(x)                  #out [i ,4, 7, 7]\n","        #decode#\n","        x = self.relu(self.t_conv1(x))    #out [i, 16, 14, 14]\n","        x = self.sigmoid(self.t_conv2(x)) #out [i, 1, 28, 28]\n","        return x        "],"execution_count":79,"outputs":[]},{"cell_type":"code","metadata":{"id":"j8gr-gd1S8A0","executionInfo":{"status":"ok","timestamp":1608564170918,"user_tz":-540,"elapsed":1046,"user":{"displayName":"遠藤丈","photoUrl":"","userId":"13996855833058403790"}}},"source":["device = 'cuda' if torch.cuda.is_available() else 'cpu'\n","model = Autoencoder().to(device)\n","\n","optimizer = optim.Adam(params=model.parameters(), lr=0.0005)\n","criterion = nn.MSELoss()"],"execution_count":80,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4IwHkwULb7fk","executionInfo":{"status":"ok","timestamp":1608564233613,"user_tz":-540,"elapsed":63470,"user":{"displayName":"遠藤丈","photoUrl":"","userId":"13996855833058403790"}},"outputId":"56606cbd-6cd8-4e41-ebcf-8e3aadcc6411"},"source":["for epoch in range(5):\n","  running_loss = 0.0\n","  for i, (images, labels) in enumerate(trainloader):\n","    images = images.to(device)\n","    labels = labels.to(device)\n","    # zero the parameter gradients\n","    optimizer.zero_grad()    \n","    outputs = model(images)\n","    loss = criterion(outputs, images)\n","    loss.backward()\n","    optimizer.step()   \n","    \n","    # print statistics\n","    running_loss += loss.item()\n","    if i % 800 == 799:\n","      print('[%d, %5d] loss: %.3f' %\n","            (epoch + 1, i + 1, running_loss / 800))\n","      running_loss = 0.0\n","\n","print('Finished Training')   "],"execution_count":81,"outputs":[{"output_type":"stream","text":["[1,   800] loss: 0.050\n","[2,   800] loss: 0.005\n","[3,   800] loss: 0.004\n","[4,   800] loss: 0.003\n","[5,   800] loss: 0.003\n","Finished Training\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"WKxiZ7__kGnI","executionInfo":{"status":"ok","timestamp":1608564243772,"user_tz":-540,"elapsed":1347,"user":{"displayName":"遠藤丈","photoUrl":"","userId":"13996855833058403790"}}},"source":["images, labels = iter(testloader).__next__()\n","images = images.to(device)\n","outputs = model(images)\n","# outputs = outputs.to('cpu').detach().numpy().copy()"],"execution_count":82,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":248},"id":"DtOuhyGLkQBk","executionInfo":{"status":"ok","timestamp":1608564244257,"user_tz":-540,"elapsed":1547,"user":{"displayName":"遠藤丈","photoUrl":"","userId":"13996855833058403790"}},"outputId":"d94a4df5-84a1-4d1c-bc5d-e2b288cc887e"},"source":["n_to_show = 5\n","\n","fig = plt.figure(figsize=(15, 6))\n","fig.subplots_adjust(hspace=0.4, wspace=0.4)\n","\n","for idx in range(5):\n","    img = outputs[idx]\n","    img = img.squeeze().permute(1,0).to('cpu').detach().numpy()\n","    ax = fig.add_subplot(1, n_to_show, idx+1)\n","    ax.axis('off')\n","    ax.text(0.5, -0.7, 'act = ' + str(labels[idx].to('cpu').detach().numpy()), fontsize=10, ha='center', transform=ax.transAxes)\n","    ax.imshow(img)"],"execution_count":83,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1080x432 with 5 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"MSPduwPfl-C2"},"source":[""],"execution_count":null,"outputs":[]}]}